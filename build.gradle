buildscript {
    ext.magiccore_forge_version = "1.12.2-1.3.117-SNAPSHOT"
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = "https://plugins.gradle.org/m2" }
        maven { url = "https://repo.spongepowered.org/maven" }

        maven {
            name = "cifrazia"
            credentials {
                username project.username
                password project.password
            }
            url "${project.url}/repository/cifrazia-public"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.60'
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "org.spongepowered.mixin"
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'

task getVersionFromJavaClass() {
    doLast {
        // Execute Java class to retrieve the version
        def version = new ByteArrayOutputStream()
        exec {
            // Adjust the command line to run MyClass from the com.cifrazia.vision package
            commandLine 'java', '-cp', 'build/classes/java/main', 'com.cifrazia.vision.PropertiesEnvironment'
            standardOutput = version
        }
        // Convert the output to string and trim any whitespace
        def versionValue = version.toString().trim()
        println "Version from MyClass: $versionValue"
    }
}

tasks.register('generateProperties', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.cifrazia.vision.PropertiesEnvironment'// If your Java class needs arguments

}


/*tasks.register('incrementPatchVersion'){
    doLast {
        def propsFile = file('gradle.properties')
        def props = new Properties()
        propsFile.withInputStream { props.load(it) }
        def currentVersion = props['version'].toString()
        def versionComponents = currentVersion.split(/\./)
        def major = versionComponents[0]
        def minor = versionComponents[1]
        def patch = versionComponents[2].toInteger() + 1
        def newVersion = "${major}.${minor}.${patch}"
        props.setProperty('version', newVersion)
        propsFile.withWriter { writer ->
            props.store(writer, null)
        }
    }
}*/


group = 'com.cifrazia'


sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version


    accessTransformer = file('src/main/resources/META-INF/custom_main_menu_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'vision.mixins.json',
                    '--tcp', '{"ip":"185.137.235.3","port":17200,"secretKey":"B^IativL^^WiTpaPsVhb8kCXTRJ4*jxGDGCO3gXNQ*NhxK2WYwNOgutYT"}',
                    '--modpack', '{"id":17,"name":"Heaven_Test"}',
                    '--accessToken', '{"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjQzNmYxNjQ4M2JlZTQ2NDRiZjQwODU0ZDgyZjU1M2NkIiwicGsiOiIwMDA2MTRlMmRmYWE4ZTg4ODZjNjE3ZGRmNWY3NTc3YyIsImlwIjoiMTc2LjIxMi4yNDQuMTgyIiwiZXhwaXJlIjoxNzE4NDc2MTMzLjMzNn0.Fm9qKA6bcFuA-4eAdrRCoqI3HaDU5ldgHVNM8ovDn7xr4FuTbkGdXgqQwE56TT7ImiJqdM7OM8uigvZV9SuzRh4S3opMMhTZhg6PhGVroT5fidSMp-Q_vqgJvQENgRUQpfLXDPo4p18UnC2t_7R9-zreNBninKoOR0J7N9-eCzLYLXAWOZddtmOnYGX6EwJL2KuV0ljzNiHuefGz9NZO9arYDs1RZvBHKKUqmuQZOJD02GiCoarfifZiD7_JihvMBLHJ3ihTYsgNPGx_hgqjwkIqy3cg14Y6gV-vASE4K7C9s6y4IWdirf3uxJe2Ek4L_q451MoWK5izxXuGrsNkFFzntI4kc1cfp9HoyioLXvktP9yeTKeEvR0gvKZbF05gPcKEqH1_Igq9wRqA2Cib9rDAKwuxEzqewiXgVwWLJe733bogglL1LfqpyW9N8E4pEz8gZadJhyH2GhXeXld-wNu_yziXsiE27Fi1t41tXIOgEed2F1EltquTeWafGIk5HbAFYrMCPopGLBnuxErrf6qwHqatjDbdDoxo1RrHPg3n4KtuDR2bUmG76n7Lt1wGkFMWRUL-aVLTm3mMCYkJXADGtCs1IDqrsyro9kN9xh-m344-E4z29mYhYQ3iEo7U2hMc_Q21wS5bDPAxAC8CaH-F5_7clczMA_IDlELI9r8","refresh_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNhMzQ2YWJiMGU3NzQ0YmNhMTVlZDVlOGE2ZjRmYmE3IiwiYWNjZXNzX2lkIjoiNDM2ZjE2NDgzYmVlNDY0NGJmNDA4NTRkODJmNTUzY2QiLCJleHBpcmUiOjE3MjM2NjAxMzMuMzM2fQ.QsZahYnmRTmQPbqVgHeD2BR4vrwqlXJcvQ08Xi_eqbnJrlOni5vcroVkt-jGabk6-5b05h8y0BxZ-7RKcTF6CEcbRe8aWtK4GmztMlmnpXICdh-FXBBKdCP0TMgjFUNwpvCvw5pfKZYboHes4iQwKWMiq7-NoHNqgBDTOLtmU8SYFWmP5Zun4O5s6B2lUJ_ffT1h1sBW54gdpDKT-V7DezSiS163Rz-IOHbc9euRo4PBREVd0zxClZga-EeptGmCnhNS3fZCmfU_acDZIAy-8kIJ_azP0sDv5NEfT1LqbHt3OLCrD1EAv-l3Uc1rgjLaJSx_3WldiH1xwiHdV31SRD20Dl6M-xSE4NQoIJlFJi8G2UVf98WW80jXWcB-MSM6YaX_PJO9-STidBRbl08MzgB7L47CbsuuF9qSWwXmEP8zjkpl3_0fe-KfaI1iFW3uTjG0Lz2_gQ4wIOdLyCjYSVZfaq1Zg4wP5Y8Lc_qUcsT8uhKOam-_02LdUTvyL5PLjIp4lntbC0nq2dhoo9uZRsuLpVl4sRj4aRkBXaiJxR5Py0QLhQxH1ruS8tEH3bZXAtQONy2uO-0bW958di7Gw6OX8vDuVu8rWZGda9_Zd2kEK3-A2yM-6yE-dBy5z8PDupr4V412nUfolbNRG2zFdJ7dysUcVszWCYm-jwUsN8I"}'
        }

        server {
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'vision.mixins.json'
        }
    }
}

repositories {
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven" }
    maven {
        name = "cifrazia"
        credentials {
            username project.username
            password project.password
        }
        url "${project.url}/repository/cifrazia-public"
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation "org.spongepowered:mixin:0.8.5-SNAPSHOT"
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'

    compileOnly 'com.mojang:authlib-client:1.0.37-20230208.064853-1'
}

mixin {
    add sourceSets.main, "mixins.vision.refmap.json"
}

sourceSets {
    main {
        output.resourcesDir = output.classesDirs.singleFile
    }

}


processResources {
    inputs.property "version", project.version

    filesMatching(["mcmod.info", "pack.mcmeta"]) {
        expand project.properties
    }

    filesMatching('**/version.properties') {
        expand 'VERSION': project.version
    }

}

jar {
    manifest {
        attributes([
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : project.version,
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : "vision.mixins.json",
                "FMLCorePluginContainsFMLMod": "true", // Не забываем указать эти два флага,
                "ForceLoadAsMod"             : "true",              // чтобы Forge нормально загрузил и мод, и миксины
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLAT"                      : "vision_at.cfg"
        ])
    }
}

// Define a task to generate SRG mappings


// Set dependency between tasks
build.dependsOn createMcpToSrg
build.dependsOn generateProperties

