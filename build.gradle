buildscript {
    ext.magiccore_forge_version = "1.12.2-1.3.117-SNAPSHOT"
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = "https://plugins.gradle.org/m2" }
        maven { url = "https://repo.spongepowered.org/maven" }

        maven {
            name = "cifrazia"
            credentials {
                username project.username
                password project.password
            }
            url "${project.url}/repository/cifrazia-public"
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.1.60'
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "org.spongepowered.mixin"
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'

task getVersionFromJavaClass() {
    doLast {
        // Execute Java class to retrieve the version
        def version = new ByteArrayOutputStream()
        exec {
            // Adjust the command line to run MyClass from the com.cifrazia.vision package
            commandLine 'java', '-cp', 'build/classes/java/main', 'com.cifrazia.vision.PropertiesEnvironment'
            standardOutput = version
        }
        // Convert the output to string and trim any whitespace
        def versionValue = version.toString().trim()
        println "Version from MyClass: $versionValue"
    }
}

tasks.register('generateProperties', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.cifrazia.vision.PropertiesEnvironment'// If your Java class needs arguments

}


/*tasks.register('incrementPatchVersion'){
    doLast {
        def propsFile = file('gradle.properties')
        def props = new Properties()
        propsFile.withInputStream { props.load(it) }
        def currentVersion = props['version'].toString()
        def versionComponents = currentVersion.split(/\./)
        def major = versionComponents[0]
        def minor = versionComponents[1]
        def patch = versionComponents[2].toInteger() + 1
        def newVersion = "${major}.${minor}.${patch}"
        props.setProperty('version', newVersion)
        propsFile.withWriter { writer ->
            props.store(writer, null)
        }
    }
}*/


group = 'com.cifrazia'


sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version


    accessTransformer = file('src/main/resources/META-INF/custom_main_menu_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'vision.mixins.json',
                    '--tcp', '{"ip":"185.137.235.3","port":17200,"secretKey":"B^IativL^^WiTpaPsVhb8kCXTRJ4*jxGDGCO3gXNQ*NhxK2WYwNOgutYT"}',
                    '--modpack', '{"id":17,"name":"Heaven_Test"}',
                    '--accessToken', '{"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjMyNzRmZjFkMGUxMTQ1YmJhN2RmMTkzNWE3ZTY3ZjAxIiwicGsiOiIwMDA2MTRlMmRmYWE4ZTg4ODZjNjE3ZGRmNWY3NTc3YyIsImlwIjoiMTc2LjIxMi4yNDAuNzIiLCJleHBpcmUiOjE3MjIxMDA5NzUuMDk5fQ.o4Cq7M3fKDIExOs57St0dv9UquMguKLPeULaXdWdNjCnv7C-pX4D7neay63vAeigYHcBm2NonCN475YM9aKTnYwVIqOeWvux-T8-cumc4Qy558Ruu4pTV7PcKvJkozL_8lLmPUlXYMO927dI24oe2CJEoFAm4dK4N81vA-x4kesxZ2ok0bs51xxFkE5gCnStf1h60xiTFW78yX2rsYPyy5M-jcY6XC2EpRydngQRLsKnNCyHdSy9dvyW6lNspHRC47v6G8Ag5B4jmrRN-jXD-Maq8VrW4bRFMP2JSL1C7m_ttgQFcBYMbN7xwJBnsQ3_8LWuUNicBWy2ObNJvIJk7JQI-HXXofiAjizNiNRZmIPWZIMjKWWt3hetH0CXnREJ2HXgp9MU8ctscFB_3hD5Rz0ix7mdbrAZCMAMTjoABwrAKOIVHe8HRsIOcmIycZpO9euReeUKA6NZ5e5EfVk5ApvYy-gQKpi182fPN_jwjdp1Ur75Q0hLtjhpwRc7BETxqaMfThOq_z5Yt2lrVHpqtGABvzvDLWmLGoJJLXLYUhjbem_D5XNup5Z6Zfk_UkmcvYbF5K_apjCk5yP63qIjrB2sT52Uopsjo8NLaHJm-YDdQhsCLKk4WyNfLGA9sZpwVwyIrDnlZJtnpib6kstIiYtjH34wssC0Mki10kue_h4","refresh_token":"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjdiNWRhZTFjMmM4MTRlYWFiNjA2ZWQxZmYyYmE4N2NkIiwiYWNjZXNzX2lkIjoiMzI3NGZmMWQwZTExNDViYmE3ZGYxOTM1YTdlNjdmMDEiLCJleHBpcmUiOjE3MjcyODQ5NzUuMDk5fQ.kRyQe76PKL35mIwQbsuP29dLuk3QwRo8emonER8Hd9_extt8wMmtpSZgdkqXzDksPaUVPF8SpfE9Fy4IlEH6Iqa_7zCmUpKoWYlopzZSg0waFDVljC2BAt7rO6kMs79xyXJ5i_2FktNmrC7D4HOLUA4rcPnF1-wCJUR1zhfWuAxlKK_at_W31_DiSma0ceq13QV5zy9L4q6yQ2xwq8qahDf-3ghSpJY4KZkzdoiN5lb3rcvIVvA9mHTBqdwuW5HM3CoUQkbtZP2bfRyzz_RObYgUxFwLjZOPf4oyjsWKglWnGwSpCrlkenRwVqZwcR2zgki3UYC-ZFgGSxEaVjP6sPFmkjIebNgLKeOtrhPowPKDjagYrdoMBHZz2XUTOofy_wvaB9QnbeSG4RIz4kAdynKkY9o8-CqbQ1rrHjBSlpCBGw0BCBVCHjmMdHEEwwRcW2Ent69raSZaTACvzcSqrZMIS3SHgXdFUgQgBYOJOlNse2uFywvuXs4l96ztAqhCotmJvpwzEWiirW_TBs7-60WatdlO3KWlmUKcsJ61vA36sjkBp1lFyCOTUNajr5b7UATFArDxbIuZq7CdLiV6xlGPWSV_uwziRfOIzPo3nc0SwWYCGspkj3Cb_4upO5AyFkUhlITFDV891IMSq9caLxqMQYtOsp4VQxjdYS8_xIg"}'
        }

        server {
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker', '--mixin', 'vision.mixins.json'
        }
    }
}

repositories {
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/maven" }
    maven {
        name = "cifrazia"
        credentials {
            username project.username
            password project.password
        }
        url "${project.url}/repository/cifrazia-public"
    }
}


dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    implementation "org.spongepowered:mixin:0.8.5-SNAPSHOT"
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'

    compileOnly 'com.mojang:authlib-client:1.0.37-20230208.064853-1'
}

mixin {
    add sourceSets.main, "mixins.vision.refmap.json"
}

sourceSets {
    main {
        output.resourcesDir = output.classesDirs.singleFile
    }

}


processResources {
    inputs.property "version", project.version

    filesMatching(["mcmod.info", "pack.mcmeta"]) {
        expand project.properties
    }

    filesMatching('**/version.properties') {
        expand 'VERSION': project.version
    }

}

jar {
    manifest {
        attributes([
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : project.version,
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : "vision.mixins.json",
                "FMLCorePluginContainsFMLMod": "true", // Не забываем указать эти два флага,
                "ForceLoadAsMod"             : "true",              // чтобы Forge нормально загрузил и мод, и миксины
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "FMLAT"                      : "vision_at.cfg"
        ])
    }
}

// Define a task to generate SRG mappings


// Set dependency between tasks
build.dependsOn createMcpToSrg
build.dependsOn generateProperties

